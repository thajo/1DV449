		<!-- DNS vs IP -->	
		<article>
			<h1 class="bg">1. Hitta adressen till webbläsaren</h1>
			
			<p class="spaced bgy">Vi gillar domännamn <br /><strong>www.lnu.se</strong></p>
			
			<p class="spaced bgy">Datorer gillar IP-adresser <br />
			<strong>194.173.221.1</strong><br />
			<strong>2001:0db8:85a3:0000:0000:8a2e:0370:7334</strong></p>
			
			<p class="note">
				På något sätt måste det finnas ett system för möjligheten att översätta
				IPnummer till domännamn och vice versa...
			</p>
		</article>
		
		<!-- DNS FTW -->
		<article>
			<h2>Domain Name System</h2>
			
			<p class="c"><img src="images/dns_system.png" /></p>
			<p class="small c">Översätt IP till domnnamn och vice versa</p>
			<p class="note">
				DNS systemet är centralstyrt system och högst upp i hierarkin finns 13 stycken root servrar.
				De flesta uppslag vi gör hamnar dock på en betydligt närmare DNS-server än så då det finns
				massor av namnservrar som kopierar ner listor med uppslag så att man kan minska 
				anropens längd. Du har även en DNS cache i din lokala dator, både i operativsystemet 
				och i webbläsaren.<br /><br />
				DNS-servrarna kommunicerar med varandra internt för att hela tiden försöka ha den senaste 
				listan. Om du någon gång pekat om en server och uppdaterats dess DNS register vet du att 
				det kan ta en stund innan DNS:en har pekats om, anledning är just att det finns en viss
				fördröjning innan all information spridits.
				<br /><br />
			</p>
		</article>
		
		<!-- IP, routrar -->
		<article>
			<h1 class="bg">2. Vi vet IP, hur hittar vi servern?</h1>
			
			<img src="images/route.png" />
			
			<p class="c bgy">Internets routrar och IP-protokollet</p>
			
			<p class="note">
				När vi vet IP-numret till den server vi ska ansluta till kommer
				IP-protokollet och alla miljontals routrar som finns på nätet väl till
				plats. En router känner till många andra routrar som ligger ute på nätet
				och kan med hjälp av smarta algoritmer och en specifik routingtabell ta reda på hur 
				paketen ska skickas vidare för att på bästa sätt hamna hor mottagaren.<br />
				
				Vad händer med ett paket som försöks skickas till endress som ingen svarar på?
				TTL (tim-to-Live)
			</p>
		</article>
		
		<!-- TCP -->
		<article>
			<h1 class="bg">3. Hur ansluter vi?</h1>
			<p class="c">
			<img src="images/tcp.png" />
			</p>
			<p class="note">
				TCP är ett transportprotokoll vars uppgift är att se till att
				alla paket verkligen kommer fram. TCP ansvarar också för anslutningen till 
				servern vi vill prata med. Man brukar tala om att man ansluter på olika portar<br />
				En webbserver lyssnar (som standard) på portarna (80 och 443 - https)<br />
				För varje anslutning till en server genomför TCP en så kallad handskakning 
				(3-way handshake). Klienten skickar en anslutningsförfrågan till servern, servern 
				svarar med ett OK (ACK) och ett synkroniseringsnummber och klienten skickar tillbaka 
				ett OK och anslutningen är nu upprättad.<br />
				<br />
				UDP är ett annat transportprotokoll. Det är snabbare men har ingen kontroll 
				på att allt kommer fram. UDP brukar användas t.ex. vid videoströmmar där man 
				hellre tar en snabb koppling än att man tappar någon frame då och då.
				
			</p>
		</article>
		
		<!-- HTTP -->
		<article>
			<h1 class="bg">4. Skicka informationen - HTTP</h1>
			
			<img src="images/4_HTTP.png" />
			
			<p class="note">
				HTTP är det vi ska gå lite djupare in i denna kurs och titta på mer i detalj vad
				som finns i det protokollet och vad som är viktigt för oss webbutvecklare.
				
			</p>
		</article>